/* End of gperf-generated code */

static inline int ipfix_rangecheck_ipfix(int n)
{
	return (n >= 0 && n < sizeof(IPFIXTAB)/sizeof(*IPFIXTAB));
}

static inline int ipfix_rangecheck_psamp(n)
{
	return (n >= PSAMP_STARTING_ID && n < PSAMP_STARTING_ID + (sizeof(PSAMPTAB)/sizeof(*PSAMPTAB)));
}

/* rangecheck the id for ipfix and psamp */
int ipfix_id_rangecheck(int id)
{
	return (ipfix_rangecheck_ipfix(id) || ipfix_rangecheck_psamp(id));
}

/* lookup a certain ipfix ID into its name */
const struct ipfix_identifier * ipfix_id_lookup(int n)
{
	/* ID is IPFIX one */
	if (ipfix_rangecheck_ipfix(n)) {
		return &IPFIXTAB[n];
	}

	/* ID is PSAMP one */
	if (ipfix_rangecheck_psamp(n)) {
		/* have to normalize */
		n -= PSAMP_STARTING_ID;
		return &PSAMPTAB[n];
	}

	if (n>=32896 && n<=32897) {
		return &FRONTPAYLOAD[n-32896];
	}

	// stuff for biflow types
	if (n>=33793 && n<=33798) {
		return &BIFLOWTAB1[n-33793];
	}
	if (n>=33920 && n<=33921)
		return &REVFRONTPAYLOAD[n-33920];
	if (n>=33942 && n<=33945) {
		return &BIFLOWTAB2[n-33942];
	}
	
	switch (n) {
	   case IPFIX_ETYPEID_revFlowStartNanoSeconds:
	       return &SWITCHFLOWTAB[0];
	   case IPFIX_ETYPEID_revFlowEndNanoSeconds:
           return &SWITCHFLOWTAB[1];
	   case IPFIX_ETYPEID_revMaxPacketGap:
           return &SWITCHFLOWTAB[2];
       case IPFIX_ETYPEID_maxPacketGap:
           return &SWITCHFLOWTAB[3];
       case IPFIX_ETYPEID_frontPayloadPktCount:
           return &SWITCHFLOWTAB[4];
    };

	return NULL;
}

/*
 lookup an ipfix name into its ID
 int because we need -1 for "not found"
 */
int ipfix_name_lookup(const char *name)
{
	const struct ipfix_midentifier *tmp;

	if (!(tmp=in_word_set(name, strlen(name)))) {
		/* not found */
		return -1;
	}

	return (int)tmp->id;
}

#ifdef __cplusplus
}
#endif
